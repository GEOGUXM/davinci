#!/mars/common/bin/davinci -fq -v0
source("/themis/lib/dav_lib/library/library_mars.dvrc")

##
##
############################## thm.uddw_rtilt.isis3.dv #############################
#
# This script will ingest a THEMIS IR RDR and process it using Undrift,
# Dewobble and Rtilt. It will output a PDS-formatted RDR file with the
# processed data and an hdf file containing the original RDR history 
# structure with entries added for uddw and rtilt.
#
# Usage: thm.uddw_rtilt.isis3.dv input_image_id output_cube atm rtilt
#
# Modification History
#
# 2010-11-16 - J. Hill: Modified uddw to be ISIS3 compatible and to output
#                       an updated PDS history structure as an hdf file.
#
# 2011-03-28 - J. Hill: Changed the RTILT ignore value to be compatible
#                       with the cam2map ignore value. 
#
# 2011-04-05 - J. Hill: Changed bs() function to string(byte(92))
# 
# 2012-08-01 - C. Edwards: Changed to adda another isis3setup() because
# uddw() is being called in a legacy isis2 manner and  fix I made to uddw()
# now causes the stupid isis3 module to be unloaded if called in isis2 mode
#
# 2014-08-08 - C. Edwards made portable for distribution
#
##########################################################################
##
##

opt={\
from="",\
to="",\
uddw=1,\
rtilt=1\
};
opt=getopt($ARGV,opt)

if(opt.from=="" || opt.to=="") {
  printf("\nThis script will ingest a THEMIS IR RDR and process it using Undrift,\n")
	printf("Dewobble and Rtilt. It will output an ISIS3-formatted RDR file with the\n")
 	printf("processed data and the original RDR history\n\n")
	printf("Arguments:\n")
  printf("\tfrom = input THEMIS file ID\n")
  printf("\tto = output ISIS3 THEMIS filename\n")
	printf("\trtilt = run rtilt (1=yes (default), 0=none)\n")
  printf("\tuddw = use the atm option of uddw \n\t\t(1=use TES maps (default), 0=No, 2=force to match TES atmosphere)\n\n")
	printf("Major Sub-Functions:\n")
	printf("\tuddw(), rtilt()\n\n")
	printf("References:\n")
	printf("Bandfield, J. L., A. D. Rogers, M. D. Smith, and P.R.Christensen (2004),\n\t\tAtmospheric correction and surface spectral unit mapping using Thermal\n\t\tEmission Imaging System data, J. Geophys. Res., 109, E10008,\n\t\tdoi:10.1029/2004JE002289.\n")
	printf("Edwards, C. S., K. J. Nowicki, P. R. Christensen, J. Hill, N. Gorelick,\n\t\tand K. Murray (2011), Mosaicking of global planetary image datasets: \n\t\t1. Techniques and data processing for Thermal Emission Imaging System\n\t\t(THEMIS) multi-spectral data, J. Geophys. Res., 116(E10), E10008,\n\t\tdoi:10.1029/2010JE003755.\n\n")
	printf("Script Contributors:\n")
	printf("C. Edwards, J. Hill, 8/11/14\n\n")
  exit(0)
}

printf("\nSelected options:\n")
opt_usage(opt)
printf("\n")

insmod("isis3")
if(lsmod("isis3")==0) { 
	printf("This script requires the davinci ISIS3 I/O module\n")
	exit(0)
}

#set the atm forcing
force=0
if(opt.uddw==2) {
  opt.uddw=1
  force=1
}

printf("\n\nRunning UDDW with options:\n")
printf("TES ATM=%i; FORCE=%i\n\n",opt.uddw,force)

##
## Perform UDDW and RTILT
##
work=uddw(opt.from,isis3struct=1,geom=0,atm=opt.uddw,http=1,force=force)
work.cube[where work.cube <=-1 ] = -3.402822655e+38

if(opt.rtilt!=0) {
	printf("\nRunning RTILT over:\n")
  work.cube=rtilt(data=work.cube,ignore=-3.402822655e+38,ysize=4000,verbose=1)
}

##
## Add UDDW Entry to History Object
##

work.IsisCube.History.uddw={}
work.IsisCube.History.uddw.date_time=syscall("date +'%Y-%m-%dT%H:%M:%S'")[,]
work.IsisCube.History.uddw.software_desc="Undrifts and Dewobbles THEMIS IR radiance data according to the procedure described in: Bandfield, J. L., D. Rogers, M.D. Smith, P.R. Christensen, 2004, Atmospheric correction and surface spectral unit mapping using Thermal Emission Imaging System data, J. Geophys. Res., 109, E10008, doi:10010.11029/12004JE002289."
work.IsisCube.History.uddw.user_name=syscall('echo `whoami`"@"`hostname`')[,]
work.IsisCube.History.uddw.parameters={}
work.IsisCube.History.uddw.parameters.geom=0
work.IsisCube.History.uddw.parameters.atm=opt.uddw
work.IsisCube.History.uddw.parameters.http=1
work.IsisCube.History.uddw.parameters.isis_struct_type="object"
work.IsisCube.History.uddw.isis_struct_type="object"


##
## Add RTILT Entry to History Object
##

if(opt.rtilt!=0) {
  work.IsisCube.History.rtilt={}
  work.IsisCube.History.rtilt.date_time=syscall("date +'%Y-%m-%dT%H:%M:%S'")[,]
  work.IsisCube.History.rtilt.software_desc="Performs a running remove tilt on every xy plane of the data independent of band."
  work.IsisCube.History.rtilt.user_name=syscall('echo `whoami`"@"`hostname`')[,]
  work.IsisCube.History.rtilt.parameters={}
  work.IsisCube.History.rtilt.parameters.ignore="-32768"
  work.IsisCube.History.rtilt.parameters.ysize=4000
  work.IsisCube.History.rtilt.parameters.isis_struct_type="object"
  work.IsisCube.History.rtilt.isis_struct_type="object"
}

##
## Fix the Formatting in software_desc and errata_desc elements
##

keys=get_struct_key(work.IsisCube.History)

for (i = 1 ; i <= length(keys) ; i+=1) {

	if(keys[,i]!="isis_struct_type") {
		if (HasValue(get_struct(work.IsisCube.History[i],"software_desc")) == 1) {
			work.IsisCube.History[i].software_desc=syscall(sprintf("echo %s | sed 's/ %s{1,%s}/ /g'",work.IsisCube.History[i].software_desc,string(byte(92)),string(byte(92))))[,1]
		}

		if (HasValue(get_struct(work.IsisCube.History[i],"errata_desc")) == 1) {
			work.IsisCube.History[i].errata_desc=syscall(sprintf("echo %s | sed 's/ %s{1,%s}/ /g'",work.IsisCube.History[i].errata_desc,string(byte(92)),string(byte(92))))[,1]
		}
	}
}


##
## Write the Modified RDR in ISIS3 Format 
##

printf("\nWriting file: %s\n\n",opt.to)
write(work,opt.to,type=isis3,force=1)
exit(0);
